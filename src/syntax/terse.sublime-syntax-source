%YAML 1.2
---
_extends: human-readable.sublime-syntax-source

variables:

  PN_PREFIX: >-
    (?x)
      (?:
        {{PN_CHARS_BASE}}
        (?:
          (?:{{PN_CHARS}}|\.)*
          {{PN_CHARS}}
        )?
      )

  PN_LOCAL_ESC: '\\[-_~.!$&''()*+,;=/?#@%]'
  PLX: '(?:%{{HEX}}{2}|{{PN_LOCAL_ESC}})'

  PN_LOCAL_OPEN: '{{PN_CHARS_U}}|:|[0-9]'
  PN_LOCAL_GROUP_2: '{{PN_CHARS}}|:'
  PN_LOCAL_GROUP_1: '{{PN_LOCAL_GROUP_2}}|\.'

  PN_LOCAL: >-
    (?x)
      (?:
        (?:
          {{PN_LOCAL_OPEN}}
          |{{PLX}}
        )
        (?:
          (?:
            {{PN_LOCAL_GROUP_1}}
            |{{PLX}}
          )*
          (?:
            {{PN_LOCAL_GROUP_2}}
            |{{PLX}}
          )
        )?
      )

  EXPONENT: '([eE])([+-]?)([0-9]+)'
  STRING_SHORT_SINGLE: '[^\x{27}\x{5C}\x{0A}\x{0D}]'
  STRING_SHORT_DOUBLE: '[^\x{22}\x{5C}\x{0A}\x{0D}]'
  ECHAR_SINGLE: '(?:\\[tbnrf''\\])'
  ECHAR_DOUBLE: '(?:\\[tbnrf"\\])'


  BLANK_NODE_LABEL: '(?:{{PN_CHARS_U}}|[0-9])(?:(?:{{PN_CHARS}}|\.)*{{PN_CHARS}})?'


  # lookaheads

  openBrace_LOOKAHEAD: '(?=\{)'
  openParen_LOOKAHEAD: '(?=\()'

  prefixedNameLocal: '{{PN_LOCAL}}'
  prefixedNameNamespace: '{{PN_PREFIX}}?:'
  prefixedNameNamespace_LOOKAHEAD: '(?={{prefixedNameNamespace}})'

  numericLiteral: '[0-9+-]|\.[0-9]'
  numericLiteral_LOOKAHEAD: '(?={{numericLiteral}})'
  booleanLiteral_LOOKAHEAD: '(?i)(?=(?:true|false){{KEYWORD_BOUNDARY}})'

  a_LOOKAHEAD: '(?=a{{KEYWORD_BOUNDARY}})'

  collection_LOOKAHEAD: '(?=\()'

  literal_LOOKAHEAD: '(?={{stringLiteral_LOOKAHEAD}}|{{numericLiteral_LOOKAHEAD}}|{{booleanLiteral_LOOKAHEAD}})'

  namedNode_LOOKAHEAD: '(?:{{iriRef_LOOKAHEAD}}|{{prefixedNameNamespace_LOOKAHEAD}})'

  node_LOOKAHEAD: '(?:{{namedNode_LOOKAHEAD}}|{{blankNode_LOOKAHEAD}})'

  object_LOOKAHEAD: '{{node_LOOKAHEAD}}|{{literal_LOOKAHEAD}}|{{collection_LOOKAHEAD}}'

  tripleTerminator_LOOKAHEAD: '(?=[.\])}#])'
  objectTerminator_LOOKAHEAD: '(?=[;,^@]|{{tripleTerminator_LOOKAHEAD}})'

  hollowAnonymousBlankNode_LOOKAHEAD: '(?=\[[\s\n]*\])'


contexts:
  baseDeclarationSparql:
    - meta_scope: meta.base-declaration.keyword.SYNTAX
    - _case: base
      scope: storage.type.base.sparql.SYNTAX
      set: baseDeclaration_AFTER_KEYWORD

  baseDeclaration_AFTER_KEYWORD:
    - _iriRef:
        scope: base-declaration
        pop: true
    - _throw: true

  prefixDeclarationSparql:
    - _case: prefix
      scope: storage.type.prefix.sparql.SYNTAX
      set: [prefixDeclarationSparql_AFTER_KEYWORD_SPACE, prefixDeclaration_AFTER_KEYWORD]

  prefixDeclaration_AFTER_KEYWORD:
    - meta_include_prototype: false
    - match: '\s+'
      scope: meta.whitespace.SYNTAX
      pop: true
    - include: prototype
    - _throw: false

  prefixDeclarationSparql_AFTER_KEYWORD_SPACE:
    - _registeredPrefixDeclarations: sparql
    - match: '(({{PN_PREFIX}}?)(:))'
      captures:
        1: meta.prefix-declaration.sparql.namespace.SYNTAX
        2: variable.other.readwrite.prefixed-name.namespace.prefix-declaration.SYNTAX
        3: punctuation.separator.prefixed-name.namespace.prefix-declaration.SYNTAX
      set: prefixDeclaration_AFTER_NAME
    - match: '{{MAT_word_or_any_one_char}}'
      scope: meta.prefix-declaration.sparql.namespace.SYNTAX invalid.illegal.token.expected.prefixDeclarationSparql_AFTER_KEYWORD_SPACE.SYNTAX
      pop: true

  prefixDeclaration_AFTER_NAME:
    - _iriRef:
        scope: prefix-declaration
        pop: true
    - _throw: true

  predicateData:
    - match: '{{a_LOOKAHEAD}}'
      set: a
    - _namedNode:
        scope: predicate
        pop: true

  a:
    - match: 'a(?={{KEYWORD_BOUNDARY}})'
      scope: support.constant.predicate.a.SYNTAX
      pop: true
    - _throw: true

  objectData:
    - _switch: [collection, labeledBlankNode]
    - _namedNode:
        scope: object
        pop: true
    - include: literal
    - _throw: true

  literal:
    - match: '{{stringLiteral_LOOKAHEAD}}'
      set: rdfLiteral
    - _cases: ['true', 'false']
      scope: constant.language.boolean.WORD.SYNTAX
      pop: true
    - include: numericLiteral

  blankNodePropertyList:
    - _open_bracket: definition.blank-node-property-list
      set: [blankNodePropertyList_TERMINATE, predicateObjectList]
    - _throw: true

  blankNodePropertyList_TERMINATE:
    - _close_bracket: definition.blank-node-property-list
      pop: true
    - _throw: true

  objectList:
    - _goto: [objectList_AFTER_OBJECT, object]

  objectList_AFTER_OBJECT:
    - match: ','
      scope: punctuation.separator.object.rq
      push: object
    - match: '{{objectTerminator_LOOKAHEAD}}'
      pop: true
    - _throw: false
    # - include: else_pop

  collection:
    - _open_paren: section.collection
      set: collection_AFTER_BEGIN
    - _throw: true

  collection_TERMINATE:
    - _close_paren: section.collection
      pop: true
    - _throw: true

  numericLiteral:
    - match: '((?:(\+)|(-))?([0-9]+)(\.)([0-9]*){{EXPONENT}})'
      captures:
        1: constant.numeric.decimal.SYNTAX
        2: keyword.operator.arithmetic.sign.positive.SYNTAX
        3: keyword.operator.arithmetic.sign.negative.SYNTAX
        4: meta.numeric.decimal.characteristic.SYNTAX
        5: punctuation.decimal.SYNTAX
        6: meta.numeric.decimal.mantissa.SYNTAX
        7: meta.numeric.exponent.e.SYNTAX
        8: meta.numeric.exponent.sign.SYNTAX
        9: meta.numeric.exponent.digit.SYNTAX
      pop: true
    - match: '((?:(\+)|(-))?(\.)?([0-9]+){{EXPONENT}})'
      captures:
        1: constant.numeric.decimal.SYNTAX
        2: keyword.operator.arithmetic.sign.positive.SYNTAX
        3: keyword.operator.arithmetic.sign.negative.SYNTAX
        4: punctuation.decimal.SYNTAX
        5: meta.numeric.decimal.mantissa.SYNTAX
        6: meta.numeric.exponent.e.SYNTAX
        7: meta.numeric.exponent.sign.SYNTAX
        8: meta.numeric.exponent.digit.SYNTAX
      pop: true
    - match: '((?:(\+)|(-))?([0-9]*)(\.)([0-9]+))'
      captures:
        1: constant.numeric.decimal.SYNTAX
        2: keyword.operator.arithmetic.sign.positive.SYNTAX
        3: keyword.operator.arithmetic.sign.negative.SYNTAX
        4: meta.numeric.decimal.characteristic.SYNTAX
        5: punctuation.decimal.SYNTAX
        6: meta.numeric.decimal.mantissa.SYNTAX
      pop: true
    - match: '((?:(\+)|(-))?([0-9]+))'
      captures:
        1: constant.numeric.integer.SYNTAX
        2: keyword.operator.arithmetic.sign.positive.SYNTAX
        3: keyword.operator.arithmetic.sign.negative.SYNTAX
        4: meta.numeric.decimal.integer.SYNTAX
      pop: true

  stringLiteral:
    - match: '"""'
      scope: punctuation.definition.string.begin.literal.double.long.SYNTAX
      set: stringLiteralLongDouble
    - match: '"'
      scope: punctuation.definition.string.begin.literal.double.short.SYNTAX
      set: stringLiteralShortDouble
    - match: ''''''''
      scope: punctuation.definition.string.begin.literal.single.long.SYNTAX
      set: stringLiteralLongSingle
    - match: ''''
      scope: punctuation.definition.string.begin.literal.single.short.SYNTAX
      set: stringLiteralShortSingle
    - _throw: true

  stringLiteralLongDouble:
    - meta_include_prototype: false
    - include: stringLiteralLongDouble_AFTER_INNER_QUOTE
    - match: '"""'
      scope: punctuation.definition.string.end.literal.double.long.SYNTAX
      pop: true
    - match: '""?'
      scope: string.quoted.double.literal.long.SYNTAX
    - _throw: true

  stringLiteralLongDouble_AFTER_INNER_QUOTE:
    - match: '[^"\\]'
      scope: string.quoted.double.literal.long.SYNTAX
      set: stringLiteralLongDouble
    - match: '{{ECHAR_DOUBLE}}'
      scope: string.quoted.double.literal.long.SYNTAX constant.character.escape.literal.escape.long.SYNTAX
      set: stringLiteralLongDouble
    - match: '\\'''
      scope: string.quoted.double.literal.long.SYNTAX constant.character.escape.literal.escape.pointless.long.SYNTAX
      set: stringLiteralLongDouble
    - match: '{{UCHAR}}'
      scope: string.quoted.double.literal.long.SYNTAX constant.character.escape.literal.unicode.long.SYNTAX
      set: stringLiteralLongDouble
    - match: '\\.'
      scope: string.quoted.double.literal.long.SYNTAX invalid.illegal.escape.SYNTAX
      pop: true

  stringLiteralShortDouble:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.literal.short.SYNTAX
    - match: '{{STRING_SHORT_DOUBLE}}+'
    - match: '"'
      scope: punctuation.definition.string.end.literal.double.short.SYNTAX
      pop: true
    - match: '{{ECHAR_DOUBLE}}'
      scope: constant.character.escape.literal.escape.short.SYNTAX
    - match: '\\'''
      scope: constant.character.escape.literal.escape.pointless.short.SYNTAX
    - match: '{{UCHAR}}'
      scope: constant.character.escape.literal.unicode.short.SYNTAX
    - match: '\\.'
      scope: invalid.illegal.escape.SYNTAX
      pop: true
    - match: '\n'
      scope: invalid.illegal.newline.literal.double.short.SYNTAX
      pop: true
    - _throw: true

  stringLiteralLongSingle:
    - meta_include_prototype: false
    - include: stringLiteralLongSingle_AFTER_INNER_QUOTE
    - match: ''''''''
      scope: punctuation.definition.string.end.literal.single.long.SYNTAX
      pop: true
    - match: '''''?'
      scope: string.quoted.single.literal.long.SYNTAX
    - _throw: true

  stringLiteralLongSingle_AFTER_INNER_QUOTE:
    - match: '[^''\\]'
      scope: string.quoted.single.literal.long.SYNTAX
      set: stringLiteralLongSingle
    - match: '{{ECHAR_SINGLE}}'
      scope: string.quoted.single.literal.long.SYNTAX constant.character.escape.literal.escape.single.SYNTAX
      set: stringLiteralLongSingle
    - match: '\\"'
      scope: string.quoted.single.literal.long.SYNTAX constant.character.escape.literal.escape.pointless.single.SYNTAX
      set: stringLiteralLongSingle
    - match: '{{UCHAR}}'
      scope: string.quoted.single.literal.long.SYNTAX constant.character.escape.literal.unicode.single.SYNTAX
      set: stringLiteralLongSingle
    - match: '\\.'
      scope: string.quoted.double.literal.long.SYNTAX invalid.illegal.escape.SYNTAX
      pop: true

  stringLiteralShortSingle:
    - meta_include_prototype: false
    - meta_scope: string.quoted.single.literal.short.SYNTAX
    - match: '{{STRING_SHORT_SINGLE}}+'
    - match: ''''
      scope: punctuation.definition.string.end.literal.single.short.SYNTAX
      pop: true
    - match: '{{ECHAR_SINGLE}}'
      scope: constant.character.escape.literal.escape.short.SYNTAX
    - match: '\\"'
      scope: constant.character.escape.literal.escape.pointless.short.SYNTAX
    - match: '{{UCHAR}}'
      scope: constant.character.escape.literal.unicode.short.SYNTAX
    - match: '\\.'
      scope: invalid.illegal.escape.SYNTAX
      pop: true
    - match: '\n'
      scope: invalid.illegal.newline.literal.single.short.SYNTAX
      pop: true
    - _throw: true

  datatype:
    - meta_include_prototype: false
    - _namedNode:
        set: datatype_META
        scope: datatype
    - _throw: true

  namedNode:
    - match: '{{iriRef_LOOKAHEAD}}'
      set: iriRef
    - match: '{{prefixedNameNamespace_LOOKAHEAD}}'
      set: prefixedName
    - _throw: true

  prefixedName:
    - match: '({{PN_PREFIX}}?)(:)'
      captures:
        1: variable.other.readwrite.prefixed-name.namespace.SYNTAX
        2: punctuation.separator.prefixed-name.namespace.SYNTAX
      set: prefixedNameLocal

  prefixedNameLocal:
    - meta_include_prototype: false
    - match: '{{PN_LOCAL_OPEN}}'
      scope: variable.other.member.prefixed-name.local.SYNTAX
    - match: '{{PLX}}'
      scope: variable.other.member.prefixed-name.local.SYNTAX constant.character.escape.prefixed-name.local.SYNTAX
    - _goto: prefixedNameLocal_AFTER_OPEN

  prefixedNameLocal_AFTER_OPEN:
    - meta_include_prototype: false
    - match: '{{PN_LOCAL_GROUP_1}}(?!{{KEYWORD_BOUNDARY}})'
      scope: variable.other.member.prefixed-name.local.SYNTAX
    - match: '{{PLX}}(?!{{KEYWORD_BOUNDARY}})'
      scope: variable.other.member.prefixed-name.local.SYNTAX constant.character.escape.prefixed-name.local.SYNTAX
    - _goto: prefixedNameLocal_AFTER_GROUP_1

  prefixedNameLocal_AFTER_GROUP_1:
    - meta_include_prototype: false
    - match: '{{PN_LOCAL_GROUP_2}}'
      scope: variable.other.member.prefixed-name.local.SYNTAX
    - match: '{{PLX}}'
      scope: variable.other.member.prefixed-name.local.SYNTAX constant.character.escape.prefixed-name.local.SYNTAX
    - include: else_pop

  hollowAnonymousBlankNode:
    - _open_bracket: definition.anonymous-blank-node
      set: hollowAnonymousBlankNode_AFTER_BEGIN
    - _throw: true

  hollowAnonymousBlankNode_AFTER_BEGIN:
    - _close_bracket: definition.anonymous-blank-node
      pop: true
    - _throw: true

