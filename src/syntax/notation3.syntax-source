%YAML 1.2
---
name: Notation3
file_extensions:
  - n3
scope: source.n3
extends: terse.syntax-source


lookaheads:
  qName: ':|{{leadChar}}'
  symbol: '<|{{qName_LOOKAHEAD}}'

  statement_LOOKAHEAD:
    - declaration
    - existential
    - universal
    - pathItem

  pathItem: '[(\[{"<]|{{boolean}}|{{numericLiteral}}|{{quickVariable}}|{{prefix}}|{{qName}}'

  predicate: 'a{{KEYWORD_BOUNDARY}}|@(?:(?:a|has|is){{KEYWORD_BOUNDARY}})|<?=|=>|{{pathItem_LOOKAHEAD}}'


variables:
  leadChar: '[A-Z_a-z\x{00c0}-\x{00d6}\x{00d8}-\x{00f6}\x{00f8}-\x{02ff}\x{0370}-\x{037d}\x{037f}-\x{1fff}\x{200c}-\x{200d}\x{2070}-\x{218f}\x{2c00}-\x{2fef}\x{3001}-\x{d7ff}\x{f900}-\x{fdcf}\x{fdf0}-\x{fffd}\x{00010000}-\x{000effff}]'
  followChar: '[\-0-9A-Z_a-z\x{00b7}\x{00c0}-\x{00d6}\x{00d8}-\x{00f6}\x{00f8}-\x{037d}\x{037f}-\x{1fff}\x{200c}-\x{200d}\x{203f}-\x{2040}\x{2070}-\x{218f}\x{2c00}-\x{2fef}\x{3001}-\x{d7ff}\x{f900}-\x{fdcf}\x{fdf0}-\x{fffd}\x{00010000}-\x{000effff}]'

  barename: '({{leadChar}}{{followChar}}*)'

  prefix: '{{barename}}?(:)'

  quickVariable: '\?{{barename}}'

  qName: '(?:{{prefix}}){{barename}}|{{barename}}'

  symbol: '<|{{qName}}'

  boolean: '@(true|false){{KEYWORD_BOUNDARY}}'

  baseDeclaration: '@base{{KEYWORD_BOUNDARY}}'
  keywordsDeclaration: '@keywords{{KEYWORD_BOUNDARY}}'
  prefixDeclaration: '@prefix{{KEYWORD_BOUNDARY}}'

  existential: '@forSome{{KEYWORD_BOUNDARY}}'
  universal: '@forAll{{KEYWORD_BOUNDARY}}'

  numericLiteral: '[-+]?[0-9]'



contexts:
  prototype:
    - include: whitespace
    - include: comment

  main:
    - goto.push: [statement_TERMINATE, statement]

  iriRef:
    - match: '(<)([^>]*)(>)'
      captures:
        1: punctuation.definition.iri.begin.n3
        2: string.unquoted.iri.SYNTAX
        3: punctuation.definition.iri.end.n3
      pop: true

  boolean:
    - match: '((@)true)'
      captures:
        1: constant.language.boolean.true.n3
        2: punctuation.definition.keyword.boolean.n3
      pop: true
    - match: '((@)false)'
      captures:
        1: constant.language.boolean.false.n3
        2: punctuation.definition.keyword.boolean.n3
      pop: true

  declaration:
    - switch:
        - baseDeclaration
        - keywordsDeclaration
        - prefixDeclaration

  baseDeclaration:
    - match: '((@)base)\b'
      captures:
        1: storage.type.base.n3
        2: punctuation.definition.keyword.base.n3
      set: iriRef

  keywordsDeclaration:
    - match: '((@)keywords)\b'
      captures:
        1: storage.type.keywords.n3
        2: punctuation.definition.keyword.keywords.n3
      set: barenameCsl

  prefixDeclaration:
    - match: '((@)prefix)\b'
      captures:
        1: storage.type.prefix.n3
        2: punctuation.definition.keyword.prefix.n3
      set: [iriRef, prefix]

  barename:
    - match: '{{barename}}'
      scope: string.unquoted.barename.n3
      pop: true

  barenameCsl:
    - match: '{{barename}}'
      scope: string.unquoted.barename.n3
      set: barenameCslTail
    - bail

  barenameCslTail:
    - match: ','
      scope: punctuation.separator.barename.n3
      push: barename
    - bail

  prefix:
    - match: '(({{PN_PREFIX}}?)(:))'
      captures: 
        1: meta.prefix-declaration.at.namespace.n3
        2: variable.other.readwrite.prefixed-name.namespace.prefix-declaration.n3
        3: punctuation.separator.prefixed-name.namespace.prefix-declaration.n3
      pop: true

  statement:
    - switch:
        - declaration
        - universal
        - existential
        - simpleStatement
    - retry

  statement_TERMINATE:
    - match: '\.'
      scope: punctuation.terminator.statement.n3
      pop: true
    - retry

  statementList:
    - switch:
        - statement: [statementTail, statement]
    - bail

  statementTail:
    - match: '(?=\.)'
      set: [statementList, statement_TERMINATE]
    - bail

  expression:
    - goto: [pathTail, pathItem]

  quickVariable:
    - match: '{{quickVariable}}'
      scope: variable.other.readwrite.quick-variable.n3
      pop: true

  formulaContent:
    - goto: [statementList]

  pathItem:
    - open.paren: section.path
      set: [pathItem_AFTER_PATH_LIST, pathList]
    - open.bracket: definition.property-list
      set: [pathItem_AFTER_PROPERTY_LIST, propertyList]
    - open.brace: section.formula
      set: [pathItem_AFTER_FORMULA_CONTENT, formulaContent]
    - switch:
        - boolean
        - rdfLiteral
        - numericLiteral
        - quickVariable
        - symbol
    - retry

  pathItem_AFTER_PATH_LIST:
    - close.paren: section.path
      pop: true
    - retry

  pathItem_AFTER_PROPERTY_LIST:
    - close.bracket: definition.property-list
      pop: true
    - retry

  pathItem_AFTER_FORMULA_CONTENT:
    - close.brace: section.formula
      pop: true
    - retry

  pathList:
    - switch:
        - pathItem: [pathList, expression]
    - bail

  pathTail:
    - match: '!'
      scope: keyword.operator.path.logical.not.rq meta.path.negated.rq
      set: expression
    - match: '\^'
      scope: keyword.operator.path.inverse.rq meta.path.inverse.rq
      set: expression
    - bail

  predicate:
    - match: '<='
      scope: keyword.operator.predicate.is-implied-by.n3
      pop: true
    - match: '=>'
      scope: keyword.operator.predicate.implies.n3
      pop: true
    - match: '='
      scope: keyword.operator.predicate.same-as.n3
      pop: true
    - match: '((@)?a)\b'
      captures:
        1: support.constant.predicate.a.n3
        2: punctuation.definition.keyword.predicate.a.n3
      pop: true
    - match: '((@)has)\b'
      captures:
        1: support.function.built-in.has.n3
        2: punctuation.definition.keyword.predicate.has.n3
      set: expression
      pop: true
    - match: '((@)?is)\b'
      captures:
        1: support.function.built-in.is.n3
        2: punctuation.definition.keyword.predicate.is.n3
      set: [predicate_EXPECT_OF, expression]
      pop: true
    - include: expression

  predicate_EXPECT_OF:
    - match: '((@)?of)\b'
      captures:
        1: support.constant.predicate.of.n3
        2: punctuation.definition.keyword.predicate.of.n3
      pop: true

  propertyList:
    - switch:
        - predicate: [propertyList_MORE, objectList, predicate]
    - bail

  propertyList_MORE:
    - match: ';'
      scope: punctuation.separator.property-list.n3
      set: propertyList
    - bail

  objectList:
    - goto: [objectList_MORE, expression]

  objectList_MORE:
    - match: ','
      scope: punctuation.separator.object-list.n3
      set: objectList
    - bail


  simpleStatement:
    - goto: [propertyList, expression]

  symbol:
    - switch:
        - iriRef
        - qName
    - match: '[A-Za-z]+'
      scope: word
      pop: true

  qName:
    - match: '{{qName}}'
      captures:
        1: variable.other.readwrite.prefixed-name.namespace.n3
        2: punctuation.separator.prefixed-name.namespace.SYNTAX
        3: variable.other.member.prefixed-name.local.SYNTAX
        4: variable.other.member.barename.SYNTAX
      pop: true

  symbolCsl:
    - switch:
        - symbol: [symbolCslTail, symbol]
    - bail

  symbolCslTail:
    - match: ','
      scope: punctuation.separator.symbol.n3
      push: symbol
    - bail

  stringLiteral:
    - match: '"""'
      scope: punctuation.definition.string.begin.literal.double.long.n3
      set: [rdfLiteral_AFTER_STRING_LITERAL, stringLiteralLongDouble]
    - match: '"'
      scope: punctuation.definition.string.begin.literal.double.short.n3
      set: [rdfLiteral_AFTER_STRING_LITERAL, stringLiteralShortDouble]
    - retry

  datatype:
    - meta_include_prototype: false
    - switch:
        - symbol

  numericLiteral:
    # decimal
    - match: '((?:(\+)|(-))?([0-9]+)(?:(\.)([0-9]+))?)'
      captures:
        1: constant.numeric.decimal.n3
        2: keyword.operator.arithmetic.sign.positive.n3
        3: keyword.operator.arithmetic.sign.negative.n3
        4: meta.numeric.decimal.characteristic.n3
        5: punctuation.decimal.n3
        6: meta.numeric.decimal.mantissa.n3
      pop: true
    # double
    - match: '((?:(\+)|(-))?([0-9]+)(?:(\.)([0-9]+)){{EXPONENT}})'
      captures:
        1: constant.numeric.decimal.n3
        2: keyword.operator.arithmetic.sign.positive.n3
        3: keyword.operator.arithmetic.sign.negative.n3
        4: meta.numeric.decimal.characteristic.n3
        5: punctuation.decimal.n3
        6: meta.numeric.decimal.mantissa.n3
        7: meta.numeric.exponent.e.n3
        8: meta.numeric.exponent.sign.n3
        9: meta.numeric.exponent.digit.n3
      pop: true
    # integer
    - match: '((?:(\+)|(-))?([0-9]+))'
      captures:
        1: constant.numeric.integer.n3
        2: keyword.operator.arithmetic.sign.positive.n3
        3: keyword.operator.arithmetic.sign.negative.n3
        4: meta.numeric.decimal.integer.n3
      set: rational_AFTER_INTEGER

  rational_AFTER_INTEGER:
    - match: '/'
      scope: keyword.operator.arithmetic.division.n3
      set: rational_AFTER_DIVISION
    - bail

  rational_AFTER_DIVISION:
    - match: '[0-9]+'
      scope: constant.numeric.integer.n3
      pop: true
    - retry

  existential:
    - match: '((@)forSome)'
      captures:
        1: support.function.built-in.for-some.n3
        2: punctuation.definition.keyword.for-some.n3
      set: symbolCsl
    - retry

  universal:
    - match: '((@)forAll)'
      captures:
        1: support.function.built-in.for-all.n3
        2: punctuation.definition.keyword.all.n3
      set: symbolCsl


