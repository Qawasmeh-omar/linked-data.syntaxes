%YAML 1.2
---

lookaheads:

  stringLiteral: '["'']'

  anonymousBlankNode: '\['

  blankNode:
    - anonymousBlankNode
    - labeledBlankNode

variables:

  KEYWORD_BOUNDARY: '[\s{(\[<*#$?^/="''>\])}]'

  PN_CHARS_BASE: '[A-Za-z\x{00C0}-\x{00D6}\x{00D8}-\x{00F6}\x{00F8}-\x{02FF}\x{0370}-\x{037D}\x{037F}-\x{1FFF}\x{200C}-\x{200D}\x{2070}-\x{218F}\x{2C00}-\x{2FEF}\x{3001}-\x{D7FF}\x{F900}-\x{FDCF}\x{FDF0}-\x{FFFD}\x{10000}-\x{EFFFF}]'
  PN_CHARS_U: '(?:{{PN_CHARS_BASE}}|_)'
  PN_CHARS: '(?:{{PN_CHARS_U}}|\-|[0-9\x{00B7}\x{0300}-\x{036F}\x{203F}\x{2040}])'

  HEX: '(?:[0-9A-Fa-f])'
  UCHAR: '(?:\\u{{HEX}}{4}|\\U{{HEX}}{8})'

  IRI_CONTENTS: '(?:[^\x{00}-\x{20}<>"{}|^`\\]*)'

  BLANK_NODE_LABEL: '(?:{{PN_CHARS_U}}|[0-9])(?:(?:{{PN_CHARS}}|\.)*{{PN_CHARS}})?'

  ECHAR: '(?:\\[tbnrf"''\\])'


contexts:

  whitespace:
    - meta_include_prototype: false
    - match: '\s+'
      scope: meta.whitespace.SYNTAX

  comment:
    - meta_include_prototype: false
    - match: '#'
      scope: punctuation.definition.comment.SYNTAX
      push: line_comment

  line_comment:
    - meta_include_prototype: false
    - meta_scope: comment.line.SYNTAX
    - include: whitespace
    - match: '$'
      pop: true
    - match: '{{_SOMETHING}}'

  triple_TERMINATE:
    - match: '\.'
      scope: punctuation.terminator.triple.SYNTAX
      pop: true
    - retry

  rdfLiteral:
    - goto: [rdfLiteral_AFTER_STRING_LITERAL, stringLiteral]

  rdfLiteral_AFTER_STRING_LITERAL:
    - meta_include_prototype: false
    - include: comment
    - match: '@'
      scope: punctuation.separator.language-tag.symbol.SYNTAX
      set: languageTag
    - match: '\^\^'
      scope: punctuation.separator.datatype.symbol.SYNTAX
      set: datatype
    - bail

  languageTag:
    - meta_include_prototype: false
    - meta_scope: string.unquoted.language-tag.SYNTAX
    - match: '[a-zA-Z]+'
      scope: meta.language-tag.primary.SYNTAX
      set: languageTag_AFTER_PRIMARY

  languageTag_AFTER_PRIMARY:
    - meta_include_prototype: false
    - match: '-'
      scope: punctuation.separator.language-tag.hyphen.SYNTAX
      set: languageTag_AFTER_SEPARATOR
    - bail

  languageTag_AFTER_SEPARATOR:
    - meta_include_prototype: false
    - meta_scope: string.unquoted.language-tag.SYNTAX
    - match: '[a-zA-Z0-9]+'
      scope: meta.language-tag.subtag.SYNTAX
      set: languageTag_AFTER_PRIMARY

  iriRef:
    - match: '<'
      scope: punctuation.definition.iri.begin.SYNTAX
      set: iriRef_AFTER_BEGIN

  iriRef_AFTER_BEGIN:
    - meta_include_prototype: false
    - match: '{{IRI_CONTENTS}}'
      scope: string.unquoted.iri.SYNTAX
    - match: '{{UCHAR}}'
      scope: constant.character.escape.iri.SYNTAX
    - match: '>'
      scope: punctuation.definition.iri.end.SYNTAX
      pop: true
    - match: '\s'
      scope: invalid.illegal.token.expected.iriRef_AFTER_BEGIN.SYNTAX
    - bail

  labeledBlankNode:
    - match: '_:'
      scope: variable.other.readwrite.blank-node.underscore.SYNTAX
      set: labeledBlankNode_AFTER_NAMESPACE

  labeledBlankNode_AFTER_NAMESPACE:
    - match: '{{BLANK_NODE_LABEL}}'
      scope: variable.other.member.blank-node.label.SYNTAX
      pop: true
