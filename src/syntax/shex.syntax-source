%YAML 1.2
---
name: ShExC
file_extensions:
  - shex
scope: source.shex
extends: terse.syntax-source

variables:

  UNICODE: '[^%\\]|\\[%\\]|{{UCHAR}}'

  # borrowed from <https://github.com/bathos/Ecmascript-Sublime>
  ID_Continue: '{{ID_Start}}\p{Mn}\p{Mc}\p{Nd}\p{Pc}{{Other_ID_Continue}}'
  ID_Start: '\p{L}\p{Nl}{{Other_ID_Start}}'
  Other_ID_Continue: '··፩-፱᧚'
  Other_ID_Start: '℘℮゛゜'

  identifierName: '{{identifierStart}}{{identifierPart}}'
  identifierPart: '(?:[\$_‍‍{{ID_Continue}}]|{{unicodeEscape}})*' # ZWN?J after _
  identifierStart: '(?:[\$_{{ID_Start}}]|{{unicodeEscape}})'
  unicodeEscape: '\\u(?:\h{4}|\{\h+\})'

contexts:
  prototype:
    - include: whitespace
    - include: comment

  main:
    - goto: shexDoc
      flush: yes

  # [1]
  shexDoc:
    - goto: [shexDoc_AFTER_DIRECTIVE, directive*]

  shexDoc_AFTER_DIRECTIVE:
    - switch:
        - shexDoc_ACTIONS: [statement*, shexDoc_ACTIONS]
    - bail

  shexDoc_ACTIONS:
    - switch:
        - notStartAction
        - startActions

  # [2]
  directive:
    - include: baseDeclarationSparql
    - include: prefixDeclarationSparql
    - word: import
      scope: support.function.directive.import.SYNTAX
      set: iriRef
      mask: meta.term.role.import.SYNTAX

  # [5]
  notStartAction:
    - switch:
        - start
        - shapeExprDecl

  # [6]
  start:
    - word: start
      scope: keyword.control.start.SYNTAX
      set: start_AFTER_START

  start_AFTER_START:
    - match: '='
      scope: keyword.operator.assignment.start.SYNTAX
      set: inlineShapeExpression

  # [7]
  startActions:
    - goto: codeDecl+

  # [8]
  statement:
    - switch:
      - directive
      - notStartAction

  # [9]
  shapeExprDecl:
    - goto: [shapeExprDecl_AFTER_LABEL, shapeExprDecl_LABEL]

  shapeExprDecl_LABEL:
    - goto: shapeExprLabel
      mask: meta.term.role.label.shape-expression.declaration.SYNTAX

  shapeExprDecl_AFTER_LABEL:
    - switch:
        - shapeExpression
    - word: external
      scope: storage.modifier.shape-expression.external.SYNTAX
      pop: true

  # [10]
  shapeExpression:
    - goto: shapeOr

  shapeExpressionGroup:
    - open.paren: section.shape-expression
      set: [shapeExpressionGroup_CLOSE, shapeExpression]

  shapeExpressionGroup_CLOSE:
    - close.paren: section.shape-expression
      pop: true

  # [11]
  inlineShapeExpression:
    - goto: inlineShapeOr

  # [12]
  shapeOr:
    - goto: [shapeOr_MORE, shapeAnd]

  shapeOr_MORE:
    - word: or
      scope: keyword.operator.word.or.SYNTAX
      set: shapeOr
    - bail

  # [13]
  inlineShapeOr:
    - goto: [inlineShapeOr_MORE, inlineShapeAnd]

  inlineShapeOr_MORE:
    - word: or
      scope: keyword.operator.word.or.SYNTAX
      set: inlineShapeOr
    - bail

  # [14]
  shapeAnd:
    - goto: [shapeAnd_MORE, shapeNot]

  # [15]
  shapeAnd_MORE:
    - word: and
      scope: keyword.operator.word.and.SYNTAX
      set: shapeAnd
    - bail

  inlineShapeAnd:
    - goto: [inlineShapeAnd_MORE, inlineShapeNot]

  inlineShapeAnd_MORE:
    - word: and
      scope: keyword.operator.word.and.SYNTAX
      set: inlineShapeAnd
    - bail

  # [16]
  shapeNot:
    - lookaheads:
        - shapeAtom
        - not
    - goto: [shapeAtom, not]

  # [17]
  inlineShapeNot:
    - lookaheads:
        - inlineShapeAtom
        - not
    - goto: [inlineShapeAtom, not]

  not:
    - word: not
      scope: keyword.operator.word.not.SYNTAX
      pop: true
    - bail

  # [18]
  shapeAtom:
    - include: shapeAtomCommon
    - switch:
        - shapeOrRef: [nonLitNodeConstraint?, shapeOrRef]
    - include: shapeAtomGlobal

  # [19]
  shapeAtomNoRef:
    - include: shapeAtomCommon
    - switch:
        - shapeDefinition: [nonLitNodeConstraint?, shapeDefinition]
    - include: shapeAtomGlobal

  # [20]
  inlineShapeAtom:
    - switch:
        - nonLitNodeConstraint: [inlineShapeOrRef?, nonLitNodeConstraint]
        - litNodeConstraint
        - inlineShapeOrRef: [nonLitNodeConstraint?, inlineShapeOrRef]
    - include: shapeAtomGlobal

  shapeAtomCommon:
    - switch:
        - nonLitNodeConstraint: [shapeOrRef?, nonLitNodeConstraint]
        - litNodeConstraint

  shapeAtomGlobal:
    - switch:
        - shapeExpressionGroup
        - shapeAtomGlobal_CLOSE

  shapeAtomGlobal_CLOSE:
    - match: \.
      scope: punctuation.terminator.shape-atom.SYNTAX
      pop: true

  # [21]
  shapeOrRef:
    - switch:
        - shapeDefinition
        - shapeRef

  # [22]
  inlineShapeOrRef:
    - switch:
        - inlineShapeDefinition
        - shapeRef

  # [23]
  shapeRef:
    # ATPNAME_LN
    - match: '@(?={{prefixedNameLocal_LOOKAHEAD}}{{KEYWORD_BOUNDARY}})'
      scope: keyword.operator.unary.reference.shape.SYNTAX
      set: prefixedNameLocal
      mask: meta.term.role.reference.shape.SYNTAX
    # ATPNAME_NS
    - match: '@(?={{prefixedNameNamespace_LOOKAHEAD}}{{KEYWORD_BOUNDARY}})'
      scope: keyword.operator.unary.reference.shape.SYNTAX
      set: prefixedNameNamespace
      mask: meta.term.role.reference.shape.SYNTAX
    - match: '@'
      scope: keyword.operator.unary.reference.shape.SYNTAX
      set: shapeExprLabel
      mask: meta.term.role.label.shape-expression.reference.SYNTAX

  # [24]
  litNodeConstraint:
    - word: literal
      scope: storage.type.constraint.WORD.SYNTAX
      set: xsFacet*
    - switch:
        - datatype: [xsFacet*, datatype]
        - valueSet: [xsFacet*, valueSet]
        - numericFacet: numericFacet+

  # [25]
  nonLitNodeConstraint:
    - switch:
        - nonLiteralKind: [stringFacet*, nonLiteralKind]
        - stringFacet: stringFacet+

  # [26]
  nonLiteralKind:
    - words.camel:
        - iri
        - bNode
        - nonLiteral
      scope: storage.type.constraint.kind.WORD.SYNTAX
      pop: true

  # [27]
  xsFacet:
    - switch:
        - stringFacet
        - numericFacet

  # [28]
  stringFacet:
    - switch:
        - stringLength: [integer, stringLength]
        - regexp

  # [29]
  stringLength:
    - words.camel:
        - length
        - minLength
        - maxLength
      scope: support.function.constraint.string.WORD.SYNTAX
      pop: true

  # [30]
  numericFacet:
    - switch:
      - numericRange: [numericLiteral, numericRange]
      - numericLength: [integer, numericLength]

  # [31]
  numericRange:
    - words.camel:
        - minInclusive
        - minExclusive
        - maxInclusive
        - maxExclusive
      scope: support.function.constraint.numeric.range.WORD.SYNTAX
      pop: true

  # [32]
  numericLength:
    - words.camel:
        - totalDigits
        - fractionDigits
      scope: support.function.constraint.numeric.length.WORD.SYNTAX
      pop: true

  # [33]
  shapeDefinition:
    - goto: [semanticActions, annotation*, inlineShapeDefinition]

  # [34]
  inlineShapeDefinition:
    - switch.push:
        - extraPropertySet
    - word: closed
      scope: storage.modifier.shape.WORD.SYNTAX
    - goto: inlineShapeDefinition_AFTER_PROPERTY_SET

  inlineShapeDefinition_AFTER_PROPERTY_SET:
    - open.brace: section.group.triple-expression
      set: [inlineShapeDefinition_CLOSE, tripleExpression?]

  inlineShapeDefinition_CLOSE:
    - close.brace: section.group.triple-expression
      pop: true

  # [35]
  extraPropertySet:
    - word: extra
      scope: storage.type.property-set.extra.SYNTAX
      set: predicate+

  # [36]
  tripleExpression:
    - switch:
        - groupTripleExpr: [tripleExpression_MORE, groupTripleExpr]

  tripleExpression_MORE:
    - match: '\|'
      scope: keyword.operator.logical.or.SYNTAX
      set: tripleExpression
    - bail

  # [40]
  groupTripleExpr:
    - goto: naryElementGroup
    # - switch:
    #     - naryElementGroup
        # - singleElementGroup
        # - multiElementGroup

  naryElementGroup:
    - switch:
        - unaryTripleExpr: [naryElementGroup_MORE, unaryTripleExpr]

  naryElementGroup_MORE:
    - match: ';'
      scope: punctuation.separator.triple-expression.SYNTAX
      set: naryElementGroup?
    - bail

  # [43]
  unaryTripleExpr:
    - match: '\$'
      scope: keyword.operator.unary.label.triple-expression.SYNTAX
      set: [unaryTripleExpr_AFTER_LABEL, unaryTripleExpr_LABEL]
      # set: [unaryTripleExpr_AFTER_LABEL, tripleExprLabel]
    - include: unaryTripleExpr_AFTER_LABEL
    - switch:
        - include

  unaryTripleExpr_LABEL:
    - goto: tripleExprLabel
      mask: meta.term.role.label.triple-expression.SYNTAX

  unaryTripleExpr_AFTER_LABEL:
    - switch:
        - tripleConstraint
        - bracketedTripleExpr

  # [44]
  bracketedTripleExpr:
    - open.paren: section.group.triple-expression
      set: [bracketedTripleExpr_AFTER_EXPR, tripleExpression]

  bracketedTripleExpr_AFTER_EXPR:
    - close.paren: section.group.triple-expression
      set: [semanticActions, annotation*, cardinality]

  # [45]
  tripleConstraint:
    - match: '\^'
      scope: keyword.operator.unary.sense-flag.SYNTAX meta.path.inverse.SYNTAX
      set: [tripleConstraint_AFTER_PREDICATE, predicateInverse]
    - goto: [tripleConstraint_AFTER_PREDICATE, predicate]

  predicateInverse:
    - goto: predicate
      mask: meta.path.inverse.SYNTAX

  tripleConstraint_AFTER_PREDICATE:
    - goto: [semanticActions, annotation*, cardinality, inlineShapeExpression]

  # [46]
  cardinality:
    - match: '\*'
      scope: keyword.operator.quantifier.zero-or-more.SYNTAX
      pop: true
    - match: '\+'
      scope: keyword.operator.quantifier.one-or-more.SYNTAX
      pop: true
    - match: '\?'
      scope: keyword.operator.quantifier.existential.SYNTAX
    - open.brace: definition.repeat-range
      set: repeatRange_AFTER_OPEN
    - bail

  # [48]
  valueSet:
    - open.bracket: section.value-set
      set: [valueSet_END, valueSetValue*]

  valueSet_END:
    - close.bracket: section.value-set
      pop: true

  # [49]
  valueSetValue:
    - switch:
        - iriRange
        - literalRange
        - languageRange
        - exclusion: exclusion+

  # [50]
  exclusion:
    - match: '-'
      scope: keyword.operator.unary.exclusion.SYNTAX
      set: [exclusion_END, exclusion_AFTER_DASH]

  exclusion_AFTER_DASH:
    - switch:
        - namedNode
        - literal
        - languageTag
      mask: meta.term.role.exclusion.value-set.SYNTAX

  exclusion_END:
    - match: '~'
      scope: punctuation.terminator.exclusion.SYNTAX
      pop: true
    - bail

  # [51]
  iriRange:
    - goto: [iriRange_AFTER_IRI, namedNode]

  iriRange_AFTER_IRI:
    - match: '~'
      scope: keyword.operator.binary.exclusion.SYNTAX
      set: exclusion*
    - bail

  # [52]
  iriExclusion:
    - match: '-'
      scope: keyword.operator.unary.exclusion.SYNTAX
      set: [exclusion_END, iriExclusion_NODE]

  iriExclusion_NODE:
    - goto: namedNode
      mask: meta.term.role.exclusion.value-set.SYNTAX

  # [53]
  literalRange:
    - goto: [literalRange_AFTER_LITERAL, literal]

  literalRange_AFTER_LITERAL:
    - match: '~'
      scope: keyword.operator.binary.exclusion.SYNTAX
      set: literalExclusion*
    - bail

  # [54]
  literalExclusion:
    - match: '-'
      scope: keyword.operator.unary.exclusion.SYNTAX
      set: [exclusion_END, literalExclusion_LITERAL]

  literalExclusion_LITERAL:
    - goto: literal
      mask: meta.term.role.exclusion.value-set.SYNTAX

  # [55]
  languageRange:
    - switch:
        - languageTag: [languageRange_AFTER_TAG, languageTag]
    - match: '@'
      scope: punctuation.separator.language-tag.symbol.SYNTAX
      set: languageRange_AFTER_AT

  languageRange_AFTER_AT:
    - match: '~'
      scope: keyword.operator.binary.exclusion.SYNTAX
      set: literalExclusion*
    - bail

  languageRange_AFTER_TAG:
    - match: '~'
      scope: keyword.operator.binary.exclusion.SYNTAX
      set: languageExclusion*
    - bail

  # [56]
  languageExclusion:
    - match: '-'
      scope: keyword.operator.unary.exclusion.SYNTAX
      set: [exclusion_END, languageExclusion_LANGUAGE]

  languageExclusion_LANGUAGE:
    - goto: languageTag
      mask: meta.term.role.exclusion.value-set.SYNTAX

  # [57]
  include:
    - meta_scope: meta.shape-definition.inclusion.SYNTAX
    - match: '&'
      scope: keyword.operator.unary.include.SYNTAX
      set: tripleExprLabel
      mask: meta.term.role.include.triple-expression.SYNTAX
  
  # [58]
  annotation:
    - match: '//'
      scope: punctuation.definition.annotation.begin.SYNTAX
      set: [object, predicate]
      mask: meta.annotation.SYNTAX

  # [59]
  semanticActions:
    - goto: codeDecl*

  # [60]
  codeDecl:
    - match: '%'
      scope: punctuation.section.code.begin.SYNTAX
      set: [codeDecl_AFTER_IRI, codeDecl_AFTER_OPEN]

  codeDecl_AFTER_OPEN:
    - goto: namedNode
      mask: meta.term.role.name.code.SYNTAX

  codeDecl_AFTER_IRI:
    - switch:
        - code
    - match: '%'
      scope: punctuation.section.code.end.SYNTAX
      pop: true

  # [61]
  predicate:
    - switch:
        - verb

  object:
    - switch:
      - namedNode
      - literal

  node:
    - switch:
        - namedNode
        - labeledBlankNode

  # [63]
  shapeExprLabel:
    - goto: node

  # [64]
  tripleExprLabel:
    - goto: node

  code:
    - open.brace: section.code-block
      set: [code_END, codeContent]

  codeContent:
    # - switch:
    #     - codeContent_DIRECTIVE
    - match: '{{UNICODE}}*'
      scope: text.plain
    - bail

  # codeContent_DIRECTIVE:
  #   - meta_scope: comment.block.code-content.SYNTAX
  #   - match: '((/\*))(\s*)(@syntax)(\s*)(:)(\s*)'
  #     captures:
  #       1: meta.comment.border.SYNTAX
  #       2: punctuation.definition.comment.begin.SYNTAX
  #       3: meta.whitespace.SYNTAX
  #       4: meta.directive.code-content.syntax.keyword.SYNTAX
  #       5: meta.whitespace.SYNTAX
  #       6: punctuation.separator.directive.code-content.SYNTAX
  #       7: meta.whitespace.SYNTAX
  #     set: codeContent_SYNTAX

  # codeContent_SYNTAX:
  #   - match: 'J[Ss]|js|[Jj]ava[Ss]cript'
  #     scope: meta.directive.code-content.syntax.language.SYNTAX
  #     set: [scope:source.js, codeContent_DIRECTIVE_END]
  #     with_prototype:
  #       - match: '(?=\%\})'
  #         pop: true

  codeContent_DIRECTIVE_END:
    - meta_scope: comment.block.code-content.SYNTAX
    - match: '((\*/))'
      captures:
        1: meta.comment.border.SYNTAX
        2: punctuation.definition.comment.end.SYNTAX
      pop: true

  code_END:
    - match: '%'
      scope: punctuation.section.code.end.SYNTAX
      set: code_END_1

  code_END_1:
    - close.brace: section.code-block
      pop: true

  repeatRange_AFTER_OPEN:
    - goto: [repeatRange_END, repeatRange_AFTER_INTEGER, integer]

  repeatRange_AFTER_INTEGER:
    - match: ','
      scope: punctuation.separator.repeat-range.SYNTAX
      set: repeatRange_AFTER_COMMA
    - bail

  repeatRange_AFTER_COMMA:
    - switch:
        - integer
    - match: '\*'
      scope: support.constant.repeat-range.infinity.SYNTAX
      pop: true
    - bail

  repeatRange_END:
    - close.brace: definition.repeat-range
      pop: true

  regexp:
    - match: '/(?!/)'
      scope: punctuation.definition.string.regexp.begin.SYNTAX
      set: regex_AFTER_OPEN

  regex_AFTER_OPEN:
    - meta_scope: string.regexp.SYNTAX
    - meta_include_prototype: false
    # It’s okay to put this here; comments are always matched first.
    - include: regex_COMMON_NOT_IN_CLASS_SET
    - continue

  regex_ANY_CHILD_CONTEXT:
    # Child contexts are tricky here because we need to be able to terminate
    # the parent context from anywhere. Since the conditions of termination are
    # simple enough, we can just include this lookahead in any child context.
    # The regex root context will then handle the ‘actual’ termination.
    - match: '(?=[\n\/])'
      pop: true

  regex_COMMON_NOT_IN_CLASS_SET:
    - include: regex_COMMON
    # DISJUNCTION
    - match: '\|'
      scope: keyword.operator.or.regexp
    # QUANTIFIERS
    - match: '[\?\*\+]|\{\d+\s*(?:,\s*\d*\s*)?\}'
      scope: keyword.operator.quantifier.regexp
    # CHARACTER CLASSES
    - match: '\['
      scope: punctuation.definition.character-class.begin.regexp
      push: regexp_AFTER_BRACKET
    # ASSERTIONS
    - match: '\(\?<?!'
      scope: punctuation.definition.assertion.negative.begin.regexp
      push: regex_AFTER_ASSERTION_NEGATIVE_OPEN
    - match: '\(\?<?='
      scope: punctuation.definition.assertion.positive.begin.regexp
      push: regex_AFTER_ASSERTION_POSITIVE_OPEN
    # GROUPS
    - match: '(\(\?<)({{identifierName}})(>)' # technically slightly off
      captures:
        1: punctuation.definition.group.capturing.begin.regexp
        2: variable.other.named-capture.regexp
        3: punctuation.definition.group.capturing.begin.regexp
      push: regex_AFTER_CAPTURE_OPEN
    - match: '\(\?:'
      scope: punctuation.definition.group.non-capturing.begin.regexp
      push: regex_AFTER_NON_CAPTURE_OPEN
    - match: '\('
      scope: punctuation.definition.group.capturing.begin.regexp
      push: regex_AFTER_CAPTURE_OPEN

  regex_COMMON:
    - match: '\/'
      scope: punctuation.definition.string.regexp.end.SYNTAX
      set: regex_AFTER_PATTERN
    - match: '\n'
      scope: invalid.illegal.newline.SYNTAX
      pop: true
    # ASSERTIONS
    - match: '\\[Bb]|[\$\^]'
      scope: keyword.control.anchor.regexp
    # CHARACTER CLASSES
    - match: '\.|\\[DdSsWw]'
      scope: constant.other.character-class.predefined.regexp
    # PROPERTY CLASSES
    - match: '\\[Pp]\{'
      scope: punctuation.definition.character-property.regexp.begin.SYNTAX
      push: regex_PROPERTY
    # BACKREFERENCE
    - match: '\\k<({{identifierName}})>'
      scope: keyword.other.back-reference.regexp
      captures:
        1: variable.other.named-capture.regexp
    - match: '\\[1-9]\d*'
      scope: keyword.other.back-reference.regexp
    # ESCAPES
    - match: '\\(c[A-Za-z]|[tnvfr])'
      scope: constant.character.escape.control-char.regexp
    - match: '\\x\h\h'
      scope: constant.character.escape.hexadecimal.regexp
    - match: '\\0(?!\d)'
      scope: constant.character.escape.null.regexp
    - match: '{{unicodeEscape}}'
      scope: constant.character.escape.unicode.regexp
    - match: '\\\/'
      scope: constant.character.escape.regexp
    - match: '\\.'
      scope: constant.character.escape.pointless.regexp

  regex_PROPERTY:
    - meta_scope: meta.character-property.regexp
    - match: '([A-Za-z_]+)(=)([A-Za-z\d]+)'
      captures:
        1: constant.other.character-class.unicode-property-name.regexp
        2: punctuation.separator.character-property-name-value.regexp
        3: constant.other.character-class.unicode-property-value.regexp
      set: regex_PROPERTY_END
    - match: '[A-Za-z_\d]+'
      scope: constant.other.character-class.unicode-property-value.regexp
      set: regex_PROPERTY_END
    - match: '\}'
      scope: invalid.illegal.token
      pop: true
    - continue

  regex_PROPERTY_END:
    - meta_scope: meta.character-property.regexp
    - match: '\}'
      scope: punctuation.definition.character-property.regexp.end.SYNTAX
      pop: true
    - continue

  regexp_AFTER_BRACKET:
    - meta_scope: constant.other.character-class.set.regexp
    - meta_include_prototype: false
    - match: '(?<=\[)\^'
      scope: keyword.operator.negation.regexp
    - match: '(?<!\[\^|\[)-(?!\])'
      scope: punctuation.definition.character-class.dash.regexp
    - match: '\]'
      scope: punctuation.definition.character-class.end.regexp
      pop: true
    - match: '[/$.^]'
    - include: regex_ANY_CHILD_CONTEXT
    - include: regex_COMMON
    - continue

  regex_AFTER_ASSERTION_NEGATIVE_OPEN:
    - meta_scope: meta.group.assertion.negative.regexp
    - meta_include_prototype: false
    - match: '\)'
      scope: punctuation.definition.assertion.negative.end.regexp
      pop: true
    - include: regex_ANY_CHILD_CONTEXT
    - include: regex_COMMON_NOT_IN_CLASS_SET
    - continue

  regex_AFTER_ASSERTION_POSITIVE_OPEN:
    - meta_scope: meta.group.assertion.positive.regexp
    - meta_include_prototype: false
    - match: '\)'
      scope: punctuation.definition.assertion.positive.end.regexp
      pop: true
    - include: regex_ANY_CHILD_CONTEXT
    - include: regex_COMMON_NOT_IN_CLASS_SET
    - continue

  regex_AFTER_NON_CAPTURE_OPEN:
    - meta_scope: meta.group.non-capturing.regexp
    - meta_include_prototype: false
    - match: '\)'
      scope: punctuation.definition.group.non-capturing.end.regexp
      pop: true
    - include: regex_ANY_CHILD_CONTEXT
    - include: regex_COMMON_NOT_IN_CLASS_SET
    - continue

  regex_AFTER_CAPTURE_OPEN:
    - meta_scope: meta.group.capturing.regexp
    - meta_include_prototype: false
    - match: '\)'
      scope: punctuation.definition.group.capturing.end.regexp
      pop: true
    - include: regex_ANY_CHILD_CONTEXT
    - include: regex_COMMON_NOT_IN_CLASS_SET
    - continue

  regex_AFTER_PATTERN:
    - meta_include_prototype: false
    - match: >-
        (?x) ((
          ([smix])
          (?:
            (?!\3) ([smix])
            (?:
              (?!\3|\4) ([smix])
              (?:
                (?!\3|\4|\5) ([smix])
                (?:
                  (?!\3|\4|\5|\6) ([smix])
                  (
                    (?!\3|\4|\5|\6\7) ([smix])
                  )?
                )?
              )?
            )?
          )?
          ))
          {{_WORD_BOUNDARY}}
      scope: string.regexp.flags.SYNTAX
      pop: true
    - match: '\w+'
      scope: invalid.illegal.regex-flags.SYNTAX
      pop: true
    - bail

